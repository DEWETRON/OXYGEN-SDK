// Copyright DEWETRON GmbH 2020

#include "odkfw_export_plugin.h"

// Manifest constains necessary metadata for oxygen plugins
//   OxygenPlugin.name: unique plugin identifier; please use your (company) name to avoid name conflicts. This name is also used as a prefix in all custom config item keys.
//   OxygenPlugin.uuid: unique number (generated by a GUID/UUID generator tool) that stored in configuration files to match channels etc. to the correct plugin
static const char* PLUGIN_MANIFEST =
R"XML(<?xml version="1.0"?>
<OxygenPlugin name="$ODK_REPLACE_ME$$UNIQUE_PLUGIN_NAME$" version="1.0" uuid="$ODK_REPLACE_ME$$PLUGIN_GUID$">
  <Info name="$ODK_REPLACE_ME$ Example Plugin: An empty plugin">
    <Vendor name="$ODK_REPLACE_ME$$VENDOR_NAME$"/>
    <Description>$ODK_REPLACE_ME$$PLUGIN_DESCRIPTION$</Description>
  </Info>
  <Host minimum_version="$ODK_REPLACE_ME$$MIN_HOST_VERSION$"/>
</OxygenPlugin>
)XML";

// A minimal translation file used for custom UI items
static const char* TRANSLATION_EN =
R"XML(<?xml version="1.0"?>
<TS version="2.1" language="en" sourcelanguage="en">
</TS>
)XML";

using namespace odk::framework;

class EmptyExport : public ExportInstance
{
public:

    EmptyExport()
    {
    }

    // Describe how the export should be shown in the export sidebar
    static odk::RegisterExport getExportInfo()
    {
        odk::RegisterExport telegram;
        telegram.m_format_name = "$REGISTER_EXPORT_FORMAT_NAME$";
        telegram.m_format_id = "$REGISTER_EXPORT_FORMAT_ID$";
        telegram.m_file_extension = "$REGISTER_EXPORT_FILE_EXTENSION$";
        telegram.m_ui_item_small = "$REGISTER_EXPORT_UI_ITEM_SMALL$";
        telegram.m_ui_item_full = "$REGISTER_EXPORT_UI_ITEM_LARGE$";
        return telegram;
    }

    // Check if export is possible in the given context and fill the response accordingly
    void validate(const ValidationContext& context, odk::ValidateExportResponse& response) const
    {
    }

    // Export data with the given context providing all necessary info and return true if successful
    bool exportData(const ProcessingContext& context) const
    {
        return false;
    }

    // Export got canceled, do all necessary cleanup (file deletion...) in here
    void cancel()
    {

    }

private:
};

class EmptyExportPlugin : public ExportPlugin<EmptyExport>
{
public:
    void registerTranslations() final
    {
        addTranslation(TRANSLATION_EN);
    }
};

OXY_REGISTER_PLUGIN1("$ODK_REPLACE_ME$$UNIQUE_PLUGIN_NAME$", PLUGIN_MANIFEST, EmptySoftwareChannelPlugin);

